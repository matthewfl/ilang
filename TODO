~passing arguments
~program flow control
~variables
better errors regarding programming
~make ValuePass a shared pointer
~add in single operators like += -= *= /=, These _not_ added in: -- ++
break, continue, not in there yet

~objects
~arrays <---- really need to do this
	need to make this save into database
~import
~classes
~fix functions to support classes and bindings
~database, need to still do for objects
	~need to remove limitation that objects need to be empty when inserted into database
	if an init function is added to classes, then classes could appear to have saved data by using objects as tempory forms
	Make classes unable to have additional fields just added like objects can
	Make classes savable into the database but only recored fields that are marked with Db, that way the problem of serializing functions will not become an issue

~C++ bindings <------ only working when it is statically linked, there is some problem with dlopen in that symbols are not being taking from the main program
modifying code
	

"unlimited" ram
auto parallization (thinking of making threading easy like in golang)
distrubited process

~thread support, thinking function like go that returns a value that blocks when read but returns when the function returns
~Also thinking that the variable system could easily support a queue message system, if made thread safe then this could provide useful to cross process messaging

Networking:
To make the system able to work over the network I need to transisition it to use a callback like system, so that data can be delayed
what will need to happen is that there is some even loop like system, and that it will be able to use callbacks to get values over network

	I am thinking that for the first version I could use threads, there is a yeild system, then there could be a relativetly simple even system used for waking up the threads when something happends, that should keep the design simpler


Switch the event system context switching to use the boost::context switching, as that should enable it to be more cross platform


Currently possibly limiting cross platform:
	The posix based context switching
	C++11 compiler (not going to be fixed, but expect over time support will get better on other platforms)
	How it find the location of the raw exe file to look for include files

